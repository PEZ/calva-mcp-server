{
  "name": "calva-backseat-driver",
  "displayName": "Calva Backseat Driver",
  "description": "Make CoPilot an Interactive Programmer, tools for VS Code CoPilot. Can also be run as an MCP server",
  "version": "0.0.14",
  "publisher": "betterthantomorrow",
  "author": {
    "name": "Better Than Tomorrow",
    "email": "pez@pezius.com"
  },
  "icon": "assets/extension-icon-128x128.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/BetterThanTomorrow/calva-backseat-driver.git"
  },
  "engines": {
    "vscode": ">=1.96.2",
    "node": ">=20.18.0"
  },
  "enabledApiProposals": [
    "extensionRuntime"
  ],
  "categories": [
    "Programming Languages",
    "AI",
    "Other"
  ],
  "keywords": [
    "clojure",
    "clojurescript",
    "mcp",
    "model-context-protocol",
    "ai"
  ],
  "activationEvents": [
    "onLanguage:clojure"
  ],
  "main": "out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Calva Backseat Driver",
      "properties": {
        "calva-backseat-driver.enableMcpReplEvaluation": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable the REPL evaluation tool through MCP.\n\n **⚠️ SECURITY WARNING**: _When enabled and you have also started the MCP server, any network client with access to the MCP server can execute arbitrary code in your REPL environment._ That said, CoPilot and other compliant MCP clients will default to a low-trust mode with confirmation before any evaluation.",
          "scope": "resource"
        },
        "calva-backseat-driver.autoStartMCPServer": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Automatically start the MCP server when the extension is activated.",
          "scope": "resource"
        },
        "calva-backseat-driver.mcpSocketServerPort": {
          "type": "number",
          "default": 1664,
          "markdownDescription": "Port to start the socket server on. Use `0` to let the server choose a high available port.",
          "scope": "resource"
        }
      }
    },
    "configurationDefaults": {
      "github.copilot.chat.codeGeneration.instructions": [
        {
          "text": "You are a Clojure developer assistant who knows how to improve your performance by using the Calva Backseat Driver tools. Your sources of truth are the tools for getting problem reports, code evaluation results and Calva's output log. You also have access to Calva's REPL connection via the `evaluate_clojure_code` tool, making you an interactive programmer. You love the REPL. You love Clojure. You also love Lisp structural editing, so when you edit files you prefer to use structural tools such as replacing or inserting top level forms. Good thing Backseat Driver has these tools!\n\nYou use your REPL power to evaluate and iterate on the code changes you propose. You develop in the Clojure way, data oriented, and build up solutions step by step.\n\nThe code will be functional, where functions take args and return results. This will be preferred over side effects, but we can use side effects as a last resort to service the larger goal.\n\nI'm going to supply a problem statement and I'd like you to work through the problem with me iteratively step by step.\n\nThe expression doesn't have to be a complete function it can be a simple sub expression.\n\nThen for each step, you will evaluate an expression to verify that it does what you think it will do.\n\nThe use of println is HIGHLY discouraged. Prefer evaluating subexpressions to test them instead of println.\n\nI'd like you to display what's being evaluated as a code block before invoking the evaluation tool.\n\nIf something isn't working feel free to use the other Clojure tools available.\n\nThe main thing is to work step by step to incrementally develop a solution to a problem. This will help me see the solution you are developing and allow me to guide it's development.\n\nWhen you update files:\n\n1. You will first use the REPL tool to develop and test the code that you edit into the files\n1. You will then use the structural editing tool to do the actual updates",
          "language": "clojure"
        }
      ]
    },
    "commands": [
      {
        "command": "calva-backseat-driver.startMcpServer",
        "category": "Calva Backseat Driver",
        "enablement": "!:calva-backseat-driver/started?",
        "title": "Start the MCP socket server"
      },
      {
        "command": "calva-backseat-driver.stopMcpServer",
        "category": "Calva Backseat Driver",
        "enablement": ":calva-backseat-driver/started?",
        "title": "Stop the MCP socket server"
      },
      {
        "command": "calva-backseat-driver.openLogFile",
        "category": "Calva Backseat Driver",
        "title": "Open log file"
      }
    ],
    "keybindings": [],
    "languageModelTools": [
      {
        "name": "evaluate_clojure_code",
        "tags": [
          "clojure",
          "repl",
          "needs-connected-repl",
          "interactive-programming",
          "repl-driven-development"
        ],
        "toolReferenceName": "evaluate",
        "displayName": "Evaluate Clojure Code",
        "modelDescription": "Evaluate code using Calva's REPL connection. Enables AI Interactive Programming. Use this to make sure your edits work as you advertise, before applying them. The REPL holds the truth!\n\nEvaluating ClojureScript code?\n* remember to use the `\"cljs\"` `replSessionKey`\n* The user namespace is probably/often `cljs.user`\n* `js-keys` is a handy function to explore JS objects with",
        "userDescription": "Evaluate Clojure or ClojureScript code in the connected REPL.",
        "canBeReferencedInPrompt": true,
        "icon": "$(terminal-bash)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code to evaluate"
            },
            "namespace": {
              "type": "string",
              "description": "Fully qualified namespace in which to evaluate the code. E.g. if calling functions in a file you are reading, it is probably the namespace of that file that should be provided. If it is the first time you use a namespace, start with evaluating its ns-form in the `user` or `cljs.user` namespace (as appropriate)."
            },
            "replSessionKey": {
              "type": "string",
              "description": "The Calva REPL session to evaluate the code via. It should be:\n* `clj` for the Clojure REPL\n* `cljs` for the ClojureScript REPL",
              "enum": [
                "clj",
                "cljs",
                "cljc"
              ]
            }
          },
          "required": [
            "code",
            "namespace",
            "replSessionKey"
          ]
        }
      },
      {
        "name": "get_symbol_info",
        "tags": [
          "clojure",
          "documentation",
          "needs-connected-repl",
          "argument-list",
          "return-values",
          "side-effects"
        ],
        "toolReferenceName": "clojure-symbol",
        "displayName": "Clojure Symbol Info",
        "modelDescription": "Get detailed information about a Clojure symbol from the connected REPL.",
        "userDescription": "Look up documentation for a Clojure symbol.",
        "canBeReferencedInPrompt": true,
        "icon": "$(tag)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "clojureSymbol": {
              "type": "string",
              "description": "The symbol to look up info for"
            },
            "namespace": {
              "type": "string",
              "description": "Fully qualified namespace in which to evaluate the code. E.g. if calling functions in a file you are reading, it is probably the namespace of that file that should be provided."
            },
            "replSessionKey": {
              "type": "string",
              "description": "The Calva REPL session to evaluate the code in. For Clojure, ClojureScript, and Common, respectively. Often the same as the extension of the file you are working with. One of `clj`, `cljs`, or `cljc`.",
              "enum": [
                "clj",
                "cljs",
                "cljc"
              ]
            }
          },
          "required": [
            "clojureSymbol",
            "namespace",
            "replSessionKey"
          ]
        }
      },
      {
        "name": "get_clojuredocs_info",
        "tags": [
          "clojure",
          "clojure-core",
          "needs-connected-repl",
          "examples",
          "see-also",
          "documentation"
        ],
        "toolReferenceName": "clojuredocs",
        "displayName": "clojuredocs.org Lookup",
        "modelDescription": "Look up information, examples, see also:s, and more about a Clojure Core symbol from clojuredocs.org.",
        "userDescription": "Get examples and usage from clojuredocs.org",
        "canBeReferencedInPrompt": true,
        "icon": "$(globe)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "clojureSymbol": {
              "type": "string",
              "description": "The symbol to look up on clojuredocs.org"
            }
          },
          "required": [
            "clojureSymbol"
          ]
        }
      },
      {
        "name": "get_repl_output_log",
        "tags": [
          "clojure",
          "repl",
          "evaluation-results",
          "stdout",
          "stderr"
        ],
        "toolReferenceName": "calva-output",
        "displayName": "Calva REPL Output Log",
        "modelDescription": "Get REPL output messages from  Calva output window. Returns REPL output since `since-line`. Start with since-line=0 and use the last line number from previous output for subsequent calls. This is your window into the running application. Invoke it often as files are edited and/or you evaluate code.",
        "userDescription": "Read Calva's REPL output log",
        "canBeReferencedInPrompt": true,
        "icon": "$(list-ordered)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "sinceLine": {
              "type": "integer",
              "description": "Output line-number after which you want output. Use `0` for your first request of output."
            }
          },
          "required": [
            "sinceLine"
          ]
        }
      },
      {
        "name": "balance_brackets",
        "tags": [
          "clojure",
          "parinfer",
          "brackets",
          "balance",
          "structural-editing"
        ],
        "toolReferenceName": "balance-brackets",
        "displayName": "Bracket Balancer",
        "modelDescription": "This tool AUTHORITATIVELY balances brackets in Clojure code. Always follow these steps when using it:\n\n1. Pass the COMPLETE content of the file or would-be file without any modifications\n2. Use the EXACT output from this tool to replace the ENTIRE file content\n3. NEVER modify the tool's output or analyze its changes",
        "userDescription": "Balance brackets in Clojure code",
        "canBeReferencedInPrompt": true,
        "icon": "$(bracket-error)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "The COMPLETE text of the file needing bracket balancing. Do not modify this text in any way before passing it to the tool."
            }
          },
          "required": [
            "text"
          ]
        }
      },
      {
        "name": "replace_top_level_form",
        "tags": [
          "clojure",
          "editing",
          "structural-editing",
          "parinfer"
        ],
        "toolReferenceName": "replace-top-level-form",
        "displayName": "Edit: Replace Top Level Form",
        "modelDescription": "Structural editing. Edit Clojure files by replacing an entire top level form with a new form, or forms.\n\n* Target top level forms by their starting, 1-based, line number.\n* The new form code should be properly indented.\n* This tool is only for replacing Clojure forms/sexpressions with forms/sexpressions. For editing top level line comments (which are not structural), use your built in edit tools (which are line oriented/not structural).\n* Make use of the diagnostics info returned\n* To insert new code, use the `insert_top_level_form` tool.\n\n**Rich Comment Forms**: \n* Forms immediately enclosed within `(comment ...)` can be targeted individually as if they were top-level forms.\n\nImportant: Only a form/sexpression is a valid targeted, and only forms/sexpressions should be provided as replacement",
        "userDescription": "Edit Clojure files by replacing top level forms",
        "canBeReferencedInPrompt": true,
        "icon": "$(edit)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "filePath": {
              "type": "string",
              "description": "The absolute path to the file containing the form"
            },
            "line": {
              "type": "integer",
              "description": "Line number, 1-based, where the target form/sexpression starts"
            },
            "targetLineText": {
              "type": "string",
              "description": "The exact text content (trimmed) of the line you are targeting"
            },
            "newForm": {
              "type": "string",
              "description": "The replacement form code"
            }
          },
          "required": [
            "filePath",
            "line",
            "newForm",
            "targetLineText"
          ]
        }
      },
      {
        "name": "insert_top_level_form",
        "tags": [
          "clojure",
          "editing",
          "structural-editing",
          "parinfer"
        ],
        "toolReferenceName": "insert-top-level-form",
        "displayName": "Edit: Insert Top Level Form",
        "modelDescription": "Structural editing. Edit Clojure files by inserting top level form(s).\n\n* Always target the top level of the code.\n* Use 1-based, line numbers.\n* The new form code should be properly indented.\n* This tool is only for inserting Clojure forms/sexpressions. For inserting top level line comments (which are not structural), use your built in edit tools (which are line oriented/not structural).\n* Make use of the diagnostics info returned\n\n**Rich Comment Forms**: \n* Forms immediately enclosed within `(comment ...)` are considered as if they were top-level forms.\n\nImportant: Only structrual forms/sexpressions should be provided for insertion.",
        "userDescription": "Edit Clojure files by replacing top level forms",
        "canBeReferencedInPrompt": true,
        "icon": "$(edit)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "filePath": {
              "type": "string",
              "description": "The absolute path to the file containing the form"
            },
            "line": {
              "type": "integer",
              "description": "Line number, 1-based, where to insert the form. The code will be inserted at the start of the line."
            },
            "targetLineText": {
              "type": "string",
              "description": "The exact text content (trimmed) of the line you are targeting."
            },
            "newForm": {
              "type": "string",
              "description": "The replacement form code. The code will be inserted at the start of the line."
            }
          },
          "required": [
            "filePath",
            "line",
            "newForm",
            "targetLineText"
          ]
        }
      }
    ]
  },
  "scripts": {
    "clean": "rimraf .cpcache .shadow-cljs/ out/ dist/",
    "preclean": "npm install",
    "watch": "clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"1.3.1\"},cider/cider-nrepl {:mvn/version,\"0.52.1\"}}}' -M -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware shadow.cljs.devtools.server.nrepl/middleware]\"",
    "test": "node out/extension-tests.js",
    "pretest": "npm run compile",
    "prewatch": "npm run clean",
    "compile": "npx shadow-cljs compile :extension :test-compile :stdio-wrapper",
    "precompile": "npm run clean",
    "release-test": "node out/extension-tests.js",
    "release": "npx shadow-cljs release :extension :test-compile :stdio-wrapper",
    "package": "npx vsce package --githubBranch master",
    "vscode:prepublish": "npm run clean && npm run release"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36",
    "parinfer": "^3.13.1"
  },
  "devDependencies": {
    "@types/node": "^22.14.1",
    "@types/vscode": "^1.96.2",
    "@vscode/test-electron": "~2.5.2",
    "@vscode/vsce": "^3.3.2",
    "ovsx": "~0.10.1",
    "rimraf": "^6.0.1",
    "shadow-cljs": "2.28.23"
  },
  "extensionDependencies": [
    "betterthantomorrow.calva"
  ]
}
